// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.12.3
// source: proto/common.proto

package rpc

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Sorter_Direction int32

const (
	Sorter_UNKNOWN                Sorter_Direction = 0
	Sorter_ASCENDING              Sorter_Direction = 10
	Sorter_ASCENDING_NULLS_FIRST  Sorter_Direction = 11
	Sorter_ASCENDING_NULLS_LAST   Sorter_Direction = 12
	Sorter_DESCENDING             Sorter_Direction = 20
	Sorter_DESCENDING_NULLS_FIRST Sorter_Direction = 21
	Sorter_DESCENDING_NULLS_LAST  Sorter_Direction = 22
)

// Enum value maps for Sorter_Direction.
var (
	Sorter_Direction_name = map[int32]string{
		0:  "UNKNOWN",
		10: "ASCENDING",
		11: "ASCENDING_NULLS_FIRST",
		12: "ASCENDING_NULLS_LAST",
		20: "DESCENDING",
		21: "DESCENDING_NULLS_FIRST",
		22: "DESCENDING_NULLS_LAST",
	}
	Sorter_Direction_value = map[string]int32{
		"UNKNOWN":                0,
		"ASCENDING":              10,
		"ASCENDING_NULLS_FIRST":  11,
		"ASCENDING_NULLS_LAST":   12,
		"DESCENDING":             20,
		"DESCENDING_NULLS_FIRST": 21,
		"DESCENDING_NULLS_LAST":  22,
	}
)

func (x Sorter_Direction) Enum() *Sorter_Direction {
	p := new(Sorter_Direction)
	*p = x
	return p
}

func (x Sorter_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sorter_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_common_proto_enumTypes[0].Descriptor()
}

func (Sorter_Direction) Type() protoreflect.EnumType {
	return &file_proto_common_proto_enumTypes[0]
}

func (x Sorter_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sorter_Direction.Descriptor instead.
func (Sorter_Direction) EnumDescriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{9, 0}
}

type Filter_Operation int32

const (
	Filter_UNKNOWN Filter_Operation = 0
	// equals
	Filter_EQ Filter_Operation = 10 // "="
	// not equals to
	Filter_NEQ Filter_Operation = 11 // "!="
	// greater than
	Filter_GT Filter_Operation = 20 // ">"
	// greater than or equal to
	Filter_GTE Filter_Operation = 21 // ">="
	// less than
	Filter_LT Filter_Operation = 30 // "<"
	// less than or equal to
	Filter_LTE Filter_Operation = 31 // "<="
	// is null
	Filter_ISN Filter_Operation = 40 // "IS NULL"
	// is not null
	Filter_ISNN Filter_Operation = 41 // "IS NOT NULL"
	// in
	Filter_IN Filter_Operation = 50 // "IN (v1,v2,vN)"
	// not in
	Filter_INN Filter_Operation = 51 // "NOT IN (v1,v2,vN)"
	// contains
	Filter_CNS Filter_Operation = 100 // "LIKE %value%"
	// not contains
	Filter_CNSN Filter_Operation = 101 // "NOT LIKE %value%"
	// starts with
	Filter_SSW Filter_Operation = 110 // "LIKE value%"
	// not starts with
	Filter_SSWN Filter_Operation = 111 // "NOT LIKE value%"
	// ends with
	Filter_ESW Filter_Operation = 120 // "LIKE %value"
	// not ends with
	Filter_ESWN Filter_Operation = 121 // "NOT LIKE %value"
	// between
	Filter_BWN Filter_Operation = 200 // "BETWEEN value1 AND value2"
	// not between
	Filter_BWNN Filter_Operation = 201 // "NOT BETWEEN value1 AND value2"
)

// Enum value maps for Filter_Operation.
var (
	Filter_Operation_name = map[int32]string{
		0:   "UNKNOWN",
		10:  "EQ",
		11:  "NEQ",
		20:  "GT",
		21:  "GTE",
		30:  "LT",
		31:  "LTE",
		40:  "ISN",
		41:  "ISNN",
		50:  "IN",
		51:  "INN",
		100: "CNS",
		101: "CNSN",
		110: "SSW",
		111: "SSWN",
		120: "ESW",
		121: "ESWN",
		200: "BWN",
		201: "BWNN",
	}
	Filter_Operation_value = map[string]int32{
		"UNKNOWN": 0,
		"EQ":      10,
		"NEQ":     11,
		"GT":      20,
		"GTE":     21,
		"LT":      30,
		"LTE":     31,
		"ISN":     40,
		"ISNN":    41,
		"IN":      50,
		"INN":     51,
		"CNS":     100,
		"CNSN":    101,
		"SSW":     110,
		"SSWN":    111,
		"ESW":     120,
		"ESWN":    121,
		"BWN":     200,
		"BWNN":    201,
	}
)

func (x Filter_Operation) Enum() *Filter_Operation {
	p := new(Filter_Operation)
	*p = x
	return p
}

func (x Filter_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Filter_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_common_proto_enumTypes[1].Descriptor()
}

func (Filter_Operation) Type() protoreflect.EnumType {
	return &file_proto_common_proto_enumTypes[1]
}

func (x Filter_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Filter_Operation.Descriptor instead.
func (Filter_Operation) EnumDescriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{10, 0}
}

type Group_Function int32

const (
	Group_UNKNOWN Group_Function = 0
	Group_COUNT   Group_Function = 1
	Group_MIN     Group_Function = 2
	Group_MAX     Group_Function = 3
	Group_SUM     Group_Function = 4
	Group_AVG     Group_Function = 5
)

// Enum value maps for Group_Function.
var (
	Group_Function_name = map[int32]string{
		0: "UNKNOWN",
		1: "COUNT",
		2: "MIN",
		3: "MAX",
		4: "SUM",
		5: "AVG",
	}
	Group_Function_value = map[string]int32{
		"UNKNOWN": 0,
		"COUNT":   1,
		"MIN":     2,
		"MAX":     3,
		"SUM":     4,
		"AVG":     5,
	}
)

func (x Group_Function) Enum() *Group_Function {
	p := new(Group_Function)
	*p = x
	return p
}

func (x Group_Function) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Group_Function) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_common_proto_enumTypes[2].Descriptor()
}

func (Group_Function) Type() protoreflect.EnumType {
	return &file_proto_common_proto_enumTypes[2]
}

func (x Group_Function) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Group_Function.Descriptor instead.
func (Group_Function) EnumDescriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{11, 0}
}

type BooleanValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BooleanValue) Reset() {
	*x = BooleanValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanValue) ProtoMessage() {}

func (x *BooleanValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanValue.ProtoReflect.Descriptor instead.
func (*BooleanValue) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{0}
}

func (x *BooleanValue) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type IntegerValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IntegerValue) Reset() {
	*x = IntegerValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegerValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegerValue) ProtoMessage() {}

func (x *IntegerValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegerValue.ProtoReflect.Descriptor instead.
func (*IntegerValue) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{1}
}

func (x *IntegerValue) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type IntegerValueMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []int64 `protobuf:"varint,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *IntegerValueMap) Reset() {
	*x = IntegerValueMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegerValueMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegerValueMap) ProtoMessage() {}

func (x *IntegerValueMap) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegerValueMap.ProtoReflect.Descriptor instead.
func (*IntegerValueMap) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{2}
}

func (x *IntegerValueMap) GetValue() []int64 {
	if x != nil {
		return x.Value
	}
	return nil
}

type DoubleValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DoubleValue) Reset() {
	*x = DoubleValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleValue) ProtoMessage() {}

func (x *DoubleValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleValue.ProtoReflect.Descriptor instead.
func (*DoubleValue) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{3}
}

func (x *DoubleValue) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type DoubleValueMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []float64 `protobuf:"fixed64,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *DoubleValueMap) Reset() {
	*x = DoubleValueMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleValueMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleValueMap) ProtoMessage() {}

func (x *DoubleValueMap) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleValueMap.ProtoReflect.Descriptor instead.
func (*DoubleValueMap) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{4}
}

func (x *DoubleValueMap) GetValue() []float64 {
	if x != nil {
		return x.Value
	}
	return nil
}

type StringValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StringValue) Reset() {
	*x = StringValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringValue) ProtoMessage() {}

func (x *StringValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringValue.ProtoReflect.Descriptor instead.
func (*StringValue) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{5}
}

func (x *StringValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type StringValueMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *StringValueMap) Reset() {
	*x = StringValueMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringValueMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringValueMap) ProtoMessage() {}

func (x *StringValueMap) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringValueMap.ProtoReflect.Descriptor instead.
func (*StringValueMap) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{6}
}

func (x *StringValueMap) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type TimestampValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *timestamp.Timestamp `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TimestampValue) Reset() {
	*x = TimestampValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampValue) ProtoMessage() {}

func (x *TimestampValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampValue.ProtoReflect.Descriptor instead.
func (*TimestampValue) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{7}
}

func (x *TimestampValue) GetValue() *timestamp.Timestamp {
	if x != nil {
		return x.Value
	}
	return nil
}

type TimestampValueMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []*timestamp.Timestamp `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *TimestampValueMap) Reset() {
	*x = TimestampValueMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampValueMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampValueMap) ProtoMessage() {}

func (x *TimestampValueMap) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampValueMap.ProtoReflect.Descriptor instead.
func (*TimestampValueMap) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{8}
}

func (x *TimestampValueMap) GetValue() []*timestamp.Timestamp {
	if x != nil {
		return x.Value
	}
	return nil
}

type Sorter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Direction Sorter_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=rpc.Sorter_Direction" json:"direction,omitempty"`
}

func (x *Sorter) Reset() {
	*x = Sorter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sorter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sorter) ProtoMessage() {}

func (x *Sorter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sorter.ProtoReflect.Descriptor instead.
func (*Sorter) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{9}
}

func (x *Sorter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sorter) GetDirection() Sorter_Direction {
	if x != nil {
		return x.Direction
	}
	return Sorter_UNKNOWN
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Operation Filter_Operation `protobuf:"varint,2,opt,name=operation,proto3,enum=rpc.Filter_Operation" json:"operation,omitempty"`
	// Types that are assignable to Value:
	//	*Filter_BooleanValue
	//	*Filter_IntegerValue
	//	*Filter_IntegerValueMap
	//	*Filter_DoubleValue
	//	*Filter_DoubleValueMap
	//	*Filter_StringValue
	//	*Filter_StringValueMap
	//	*Filter_TimestampValue
	//	*Filter_TimestampValueMap
	Value isFilter_Value `protobuf_oneof:"value"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{10}
}

func (x *Filter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Filter) GetOperation() Filter_Operation {
	if x != nil {
		return x.Operation
	}
	return Filter_UNKNOWN
}

func (m *Filter) GetValue() isFilter_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Filter) GetBooleanValue() *BooleanValue {
	if x, ok := x.GetValue().(*Filter_BooleanValue); ok {
		return x.BooleanValue
	}
	return nil
}

func (x *Filter) GetIntegerValue() *IntegerValue {
	if x, ok := x.GetValue().(*Filter_IntegerValue); ok {
		return x.IntegerValue
	}
	return nil
}

func (x *Filter) GetIntegerValueMap() *IntegerValueMap {
	if x, ok := x.GetValue().(*Filter_IntegerValueMap); ok {
		return x.IntegerValueMap
	}
	return nil
}

func (x *Filter) GetDoubleValue() *DoubleValue {
	if x, ok := x.GetValue().(*Filter_DoubleValue); ok {
		return x.DoubleValue
	}
	return nil
}

func (x *Filter) GetDoubleValueMap() *DoubleValueMap {
	if x, ok := x.GetValue().(*Filter_DoubleValueMap); ok {
		return x.DoubleValueMap
	}
	return nil
}

func (x *Filter) GetStringValue() *StringValue {
	if x, ok := x.GetValue().(*Filter_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Filter) GetStringValueMap() *StringValueMap {
	if x, ok := x.GetValue().(*Filter_StringValueMap); ok {
		return x.StringValueMap
	}
	return nil
}

func (x *Filter) GetTimestampValue() *TimestampValue {
	if x, ok := x.GetValue().(*Filter_TimestampValue); ok {
		return x.TimestampValue
	}
	return nil
}

func (x *Filter) GetTimestampValueMap() *TimestampValueMap {
	if x, ok := x.GetValue().(*Filter_TimestampValueMap); ok {
		return x.TimestampValueMap
	}
	return nil
}

type isFilter_Value interface {
	isFilter_Value()
}

type Filter_BooleanValue struct {
	BooleanValue *BooleanValue `protobuf:"bytes,10,opt,name=booleanValue,proto3,oneof"`
}

type Filter_IntegerValue struct {
	IntegerValue *IntegerValue `protobuf:"bytes,20,opt,name=integerValue,proto3,oneof"`
}

type Filter_IntegerValueMap struct {
	IntegerValueMap *IntegerValueMap `protobuf:"bytes,21,opt,name=integerValueMap,proto3,oneof"`
}

type Filter_DoubleValue struct {
	DoubleValue *DoubleValue `protobuf:"bytes,30,opt,name=doubleValue,proto3,oneof"`
}

type Filter_DoubleValueMap struct {
	DoubleValueMap *DoubleValueMap `protobuf:"bytes,31,opt,name=doubleValueMap,proto3,oneof"`
}

type Filter_StringValue struct {
	StringValue *StringValue `protobuf:"bytes,40,opt,name=stringValue,proto3,oneof"`
}

type Filter_StringValueMap struct {
	StringValueMap *StringValueMap `protobuf:"bytes,41,opt,name=stringValueMap,proto3,oneof"`
}

type Filter_TimestampValue struct {
	TimestampValue *TimestampValue `protobuf:"bytes,50,opt,name=timestampValue,proto3,oneof"`
}

type Filter_TimestampValueMap struct {
	TimestampValueMap *TimestampValueMap `protobuf:"bytes,51,opt,name=timestampValueMap,proto3,oneof"`
}

func (*Filter_BooleanValue) isFilter_Value() {}

func (*Filter_IntegerValue) isFilter_Value() {}

func (*Filter_IntegerValueMap) isFilter_Value() {}

func (*Filter_DoubleValue) isFilter_Value() {}

func (*Filter_DoubleValueMap) isFilter_Value() {}

func (*Filter_StringValue) isFilter_Value() {}

func (*Filter_StringValueMap) isFilter_Value() {}

func (*Filter_TimestampValue) isFilter_Value() {}

func (*Filter_TimestampValueMap) isFilter_Value() {}

type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Function Group_Function `protobuf:"varint,2,opt,name=function,proto3,enum=rpc.Group_Function" json:"function,omitempty"`
	// Types that are assignable to Value:
	//	*Group_BooleanValue
	//	*Group_IntegerValue
	//	*Group_IntegerValueMap
	//	*Group_DoubleValue
	//	*Group_DoubleValueMap
	//	*Group_StringValue
	//	*Group_StringValueMap
	//	*Group_TimestampValue
	//	*Group_TimestampValueMap
	Value isGroup_Value `protobuf_oneof:"value"`
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{11}
}

func (x *Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Group) GetFunction() Group_Function {
	if x != nil {
		return x.Function
	}
	return Group_UNKNOWN
}

func (m *Group) GetValue() isGroup_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Group) GetBooleanValue() *BooleanValue {
	if x, ok := x.GetValue().(*Group_BooleanValue); ok {
		return x.BooleanValue
	}
	return nil
}

func (x *Group) GetIntegerValue() *IntegerValue {
	if x, ok := x.GetValue().(*Group_IntegerValue); ok {
		return x.IntegerValue
	}
	return nil
}

func (x *Group) GetIntegerValueMap() *IntegerValueMap {
	if x, ok := x.GetValue().(*Group_IntegerValueMap); ok {
		return x.IntegerValueMap
	}
	return nil
}

func (x *Group) GetDoubleValue() *DoubleValue {
	if x, ok := x.GetValue().(*Group_DoubleValue); ok {
		return x.DoubleValue
	}
	return nil
}

func (x *Group) GetDoubleValueMap() *DoubleValueMap {
	if x, ok := x.GetValue().(*Group_DoubleValueMap); ok {
		return x.DoubleValueMap
	}
	return nil
}

func (x *Group) GetStringValue() *StringValue {
	if x, ok := x.GetValue().(*Group_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Group) GetStringValueMap() *StringValueMap {
	if x, ok := x.GetValue().(*Group_StringValueMap); ok {
		return x.StringValueMap
	}
	return nil
}

func (x *Group) GetTimestampValue() *TimestampValue {
	if x, ok := x.GetValue().(*Group_TimestampValue); ok {
		return x.TimestampValue
	}
	return nil
}

func (x *Group) GetTimestampValueMap() *TimestampValueMap {
	if x, ok := x.GetValue().(*Group_TimestampValueMap); ok {
		return x.TimestampValueMap
	}
	return nil
}

type isGroup_Value interface {
	isGroup_Value()
}

type Group_BooleanValue struct {
	BooleanValue *BooleanValue `protobuf:"bytes,10,opt,name=booleanValue,proto3,oneof"`
}

type Group_IntegerValue struct {
	IntegerValue *IntegerValue `protobuf:"bytes,20,opt,name=integerValue,proto3,oneof"`
}

type Group_IntegerValueMap struct {
	IntegerValueMap *IntegerValueMap `protobuf:"bytes,21,opt,name=integerValueMap,proto3,oneof"`
}

type Group_DoubleValue struct {
	DoubleValue *DoubleValue `protobuf:"bytes,30,opt,name=doubleValue,proto3,oneof"`
}

type Group_DoubleValueMap struct {
	DoubleValueMap *DoubleValueMap `protobuf:"bytes,31,opt,name=doubleValueMap,proto3,oneof"`
}

type Group_StringValue struct {
	StringValue *StringValue `protobuf:"bytes,40,opt,name=stringValue,proto3,oneof"`
}

type Group_StringValueMap struct {
	StringValueMap *StringValueMap `protobuf:"bytes,41,opt,name=stringValueMap,proto3,oneof"`
}

type Group_TimestampValue struct {
	TimestampValue *TimestampValue `protobuf:"bytes,50,opt,name=timestampValue,proto3,oneof"`
}

type Group_TimestampValueMap struct {
	TimestampValueMap *TimestampValueMap `protobuf:"bytes,51,opt,name=timestampValueMap,proto3,oneof"`
}

func (*Group_BooleanValue) isGroup_Value() {}

func (*Group_IntegerValue) isGroup_Value() {}

func (*Group_IntegerValueMap) isGroup_Value() {}

func (*Group_DoubleValue) isGroup_Value() {}

func (*Group_DoubleValueMap) isGroup_Value() {}

func (*Group_StringValue) isGroup_Value() {}

func (*Group_StringValueMap) isGroup_Value() {}

func (*Group_TimestampValue) isGroup_Value() {}

func (*Group_TimestampValueMap) isGroup_Value() {}

var File_proto_common_proto protoreflect.FileDescriptor

var file_proto_common_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72, 0x70, 0x63, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x24, 0x0a, 0x0c, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x24, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x27, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x23, 0x0a, 0x0b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x26, 0x0a, 0x0e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a, 0x0b,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x42, 0x0a, 0x0e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x45, 0x0a,
	0x11, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d,
	0x61, 0x70, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x06, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x4e, 0x55, 0x4c, 0x4c, 0x53, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x0b, 0x12, 0x18, 0x0a,
	0x14, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x53,
	0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x53, 0x43, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x14, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x53, 0x43, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x53, 0x5f, 0x46, 0x49, 0x52, 0x53,
	0x54, 0x10, 0x15, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x16, 0x22, 0xbf,
	0x06, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x62,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x34, 0x0a, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x0e,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x34, 0x0a, 0x0b, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4d, 0x61, 0x70, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x48, 0x00,
	0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70,
	0x12, 0x3d, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x46, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4d, 0x61, 0x70, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d,
	0x61, 0x70, 0x48, 0x00, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x22, 0xbd, 0x01, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45,
	0x51, 0x10, 0x0b, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x54, 0x10, 0x14, 0x12, 0x07, 0x0a, 0x03, 0x47,
	0x54, 0x45, 0x10, 0x15, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10, 0x1e, 0x12, 0x07, 0x0a, 0x03,
	0x4c, 0x54, 0x45, 0x10, 0x1f, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x53, 0x4e, 0x10, 0x28, 0x12, 0x08,
	0x0a, 0x04, 0x49, 0x53, 0x4e, 0x4e, 0x10, 0x29, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x32,
	0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x4e, 0x10, 0x33, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4e, 0x53,
	0x10, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4e, 0x53, 0x4e, 0x10, 0x65, 0x12, 0x07, 0x0a, 0x03,
	0x53, 0x53, 0x57, 0x10, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x53, 0x57, 0x4e, 0x10, 0x6f, 0x12,
	0x07, 0x0a, 0x03, 0x45, 0x53, 0x57, 0x10, 0x78, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x53, 0x57, 0x4e,
	0x10, 0x79, 0x12, 0x08, 0x0a, 0x03, 0x42, 0x57, 0x4e, 0x10, 0xc8, 0x01, 0x12, 0x09, 0x0a, 0x04,
	0x42, 0x57, 0x4e, 0x4e, 0x10, 0xc9, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xc2, 0x05, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f,
	0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x37, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x40, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4d, 0x61, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70,
	0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4d, 0x61, 0x70, 0x12, 0x34, 0x0a, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d,
	0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x3d, 0x0a,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x46, 0x0a, 0x11,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61,
	0x70, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x48,
	0x00, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4d, 0x61, 0x70, 0x22, 0x46, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x49, 0x4e, 0x10,
	0x02, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55,
	0x4d, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x56, 0x47, 0x10, 0x05, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1c, 0x5a, 0x1a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x67, 0x76, 0x2f, 0x73, 0x76, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_common_proto_rawDescOnce sync.Once
	file_proto_common_proto_rawDescData = file_proto_common_proto_rawDesc
)

func file_proto_common_proto_rawDescGZIP() []byte {
	file_proto_common_proto_rawDescOnce.Do(func() {
		file_proto_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_common_proto_rawDescData)
	})
	return file_proto_common_proto_rawDescData
}

var file_proto_common_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_common_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_proto_common_proto_goTypes = []interface{}{
	(Sorter_Direction)(0),       // 0: rpc.Sorter.Direction
	(Filter_Operation)(0),       // 1: rpc.Filter.Operation
	(Group_Function)(0),         // 2: rpc.Group.Function
	(*BooleanValue)(nil),        // 3: rpc.BooleanValue
	(*IntegerValue)(nil),        // 4: rpc.IntegerValue
	(*IntegerValueMap)(nil),     // 5: rpc.IntegerValueMap
	(*DoubleValue)(nil),         // 6: rpc.DoubleValue
	(*DoubleValueMap)(nil),      // 7: rpc.DoubleValueMap
	(*StringValue)(nil),         // 8: rpc.StringValue
	(*StringValueMap)(nil),      // 9: rpc.StringValueMap
	(*TimestampValue)(nil),      // 10: rpc.TimestampValue
	(*TimestampValueMap)(nil),   // 11: rpc.TimestampValueMap
	(*Sorter)(nil),              // 12: rpc.Sorter
	(*Filter)(nil),              // 13: rpc.Filter
	(*Group)(nil),               // 14: rpc.Group
	(*timestamp.Timestamp)(nil), // 15: google.protobuf.Timestamp
}
var file_proto_common_proto_depIdxs = []int32{
	15, // 0: rpc.TimestampValue.value:type_name -> google.protobuf.Timestamp
	15, // 1: rpc.TimestampValueMap.value:type_name -> google.protobuf.Timestamp
	0,  // 2: rpc.Sorter.direction:type_name -> rpc.Sorter.Direction
	1,  // 3: rpc.Filter.operation:type_name -> rpc.Filter.Operation
	3,  // 4: rpc.Filter.booleanValue:type_name -> rpc.BooleanValue
	4,  // 5: rpc.Filter.integerValue:type_name -> rpc.IntegerValue
	5,  // 6: rpc.Filter.integerValueMap:type_name -> rpc.IntegerValueMap
	6,  // 7: rpc.Filter.doubleValue:type_name -> rpc.DoubleValue
	7,  // 8: rpc.Filter.doubleValueMap:type_name -> rpc.DoubleValueMap
	8,  // 9: rpc.Filter.stringValue:type_name -> rpc.StringValue
	9,  // 10: rpc.Filter.stringValueMap:type_name -> rpc.StringValueMap
	10, // 11: rpc.Filter.timestampValue:type_name -> rpc.TimestampValue
	11, // 12: rpc.Filter.timestampValueMap:type_name -> rpc.TimestampValueMap
	2,  // 13: rpc.Group.function:type_name -> rpc.Group.Function
	3,  // 14: rpc.Group.booleanValue:type_name -> rpc.BooleanValue
	4,  // 15: rpc.Group.integerValue:type_name -> rpc.IntegerValue
	5,  // 16: rpc.Group.integerValueMap:type_name -> rpc.IntegerValueMap
	6,  // 17: rpc.Group.doubleValue:type_name -> rpc.DoubleValue
	7,  // 18: rpc.Group.doubleValueMap:type_name -> rpc.DoubleValueMap
	8,  // 19: rpc.Group.stringValue:type_name -> rpc.StringValue
	9,  // 20: rpc.Group.stringValueMap:type_name -> rpc.StringValueMap
	10, // 21: rpc.Group.timestampValue:type_name -> rpc.TimestampValue
	11, // 22: rpc.Group.timestampValueMap:type_name -> rpc.TimestampValueMap
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_proto_common_proto_init() }
func file_proto_common_proto_init() {
	if File_proto_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegerValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegerValueMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleValueMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringValueMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampValueMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sorter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_common_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Filter_BooleanValue)(nil),
		(*Filter_IntegerValue)(nil),
		(*Filter_IntegerValueMap)(nil),
		(*Filter_DoubleValue)(nil),
		(*Filter_DoubleValueMap)(nil),
		(*Filter_StringValue)(nil),
		(*Filter_StringValueMap)(nil),
		(*Filter_TimestampValue)(nil),
		(*Filter_TimestampValueMap)(nil),
	}
	file_proto_common_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*Group_BooleanValue)(nil),
		(*Group_IntegerValue)(nil),
		(*Group_IntegerValueMap)(nil),
		(*Group_DoubleValue)(nil),
		(*Group_DoubleValueMap)(nil),
		(*Group_StringValue)(nil),
		(*Group_StringValueMap)(nil),
		(*Group_TimestampValue)(nil),
		(*Group_TimestampValueMap)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_common_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_common_proto_goTypes,
		DependencyIndexes: file_proto_common_proto_depIdxs,
		EnumInfos:         file_proto_common_proto_enumTypes,
		MessageInfos:      file_proto_common_proto_msgTypes,
	}.Build()
	File_proto_common_proto = out.File
	file_proto_common_proto_rawDesc = nil
	file_proto_common_proto_goTypes = nil
	file_proto_common_proto_depIdxs = nil
}
