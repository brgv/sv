{
  "swagger": "2.0",
  "info": {
    "title": "Gateway Service",
    "version": "v0.0.0",
    "contact": {
      "name": "unknown",
      "url": "http://unknown",
      "email": "unknown@unknown"
    }
  },
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/departments": {
      "get": {
        "operationId": "DepartmentService_Read",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcListDepartmentResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DepartmentService"
        ]
      },
      "post": {
        "operationId": "DepartmentService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcDepartmentResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcDepartmentRequest"
            }
          }
        ],
        "tags": [
          "DepartmentService"
        ]
      }
    },
    "/api/v1/departments/{data.id}": {
      "put": {
        "operationId": "DepartmentService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcDepartmentResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "data.id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcDepartmentRequest"
            }
          }
        ],
        "tags": [
          "DepartmentService"
        ]
      },
      "patch": {
        "operationId": "DepartmentService_Update2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcDepartmentResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "data.id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcDepartmentRequest"
            }
          }
        ],
        "tags": [
          "DepartmentService"
        ]
      }
    },
    "/api/v1/departments/{id}": {
      "get": {
        "operationId": "DepartmentService_Retrieve",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcDepartmentResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DepartmentService"
        ]
      },
      "delete": {
        "operationId": "DepartmentService_Destroy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcStatusResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DepartmentService"
        ]
      }
    },
    "/api/v1/employees": {
      "get": {
        "operationId": "EmployeeService_Read",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcListEmployeeResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "EmployeeService"
        ]
      },
      "post": {
        "operationId": "EmployeeService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcEmployeeResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcEmployeeRequest"
            }
          }
        ],
        "tags": [
          "EmployeeService"
        ]
      }
    },
    "/api/v1/employees/{data.id}": {
      "put": {
        "operationId": "EmployeeService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcEmployeeResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "data.id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcEmployeeRequest"
            }
          }
        ],
        "tags": [
          "EmployeeService"
        ]
      },
      "patch": {
        "operationId": "EmployeeService_Update2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcEmployeeResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "data.id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcEmployeeRequest"
            }
          }
        ],
        "tags": [
          "EmployeeService"
        ]
      }
    },
    "/api/v1/employees/{id}": {
      "get": {
        "operationId": "EmployeeService_Retrieve",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcEmployeeResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "EmployeeService"
        ]
      },
      "delete": {
        "operationId": "EmployeeService_Destroy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcStatusResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "EmployeeService"
        ]
      }
    },
    "/api/v1/persons": {
      "get": {
        "operationId": "PersonService_Read",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcListPersonResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PersonService"
        ]
      },
      "post": {
        "operationId": "PersonService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcPersonResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcPersonRequest"
            }
          }
        ],
        "tags": [
          "PersonService"
        ]
      }
    },
    "/api/v1/persons/{data.id}": {
      "put": {
        "operationId": "PersonService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcPersonResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "data.id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcPersonRequest"
            }
          }
        ],
        "tags": [
          "PersonService"
        ]
      },
      "patch": {
        "operationId": "PersonService_Update2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcPersonResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "data.id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcPersonRequest"
            }
          }
        ],
        "tags": [
          "PersonService"
        ]
      }
    },
    "/api/v1/persons/{id}": {
      "get": {
        "operationId": "PersonService_Retrieve",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcPersonResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PersonService"
        ]
      },
      "delete": {
        "operationId": "PersonService_Destroy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcStatusResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PersonService"
        ]
      }
    },
    "/api/v1/positions": {
      "get": {
        "operationId": "PositionService_Read",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcListPositionResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PositionService"
        ]
      },
      "post": {
        "operationId": "PositionService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcPositionResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcPositionRequest"
            }
          }
        ],
        "tags": [
          "PositionService"
        ]
      }
    },
    "/api/v1/positions/{data.id}": {
      "put": {
        "operationId": "PositionService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcPositionResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "data.id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcPositionRequest"
            }
          }
        ],
        "tags": [
          "PositionService"
        ]
      },
      "patch": {
        "operationId": "PositionService_Update2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcPositionResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "data.id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcPositionRequest"
            }
          }
        ],
        "tags": [
          "PositionService"
        ]
      }
    },
    "/api/v1/positions/{id}": {
      "get": {
        "operationId": "PositionService_Retrieve",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcPositionResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PositionService"
        ]
      },
      "delete": {
        "operationId": "PositionService_Destroy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcStatusResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PositionService"
        ]
      }
    }
  },
  "definitions": {
    "GroupFunction": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "COUNT",
        "MIN",
        "MAX",
        "SUM",
        "AVG"
      ],
      "default": "UNKNOWN"
    },
    "SorterDirection": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "ASCENDING",
        "ASCENDING_NULLS_FIRST",
        "ASCENDING_NULLS_LAST",
        "DESCENDING",
        "DESCENDING_NULLS_FIRST",
        "DESCENDING_NULLS_LAST"
      ],
      "default": "UNKNOWN"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcBooleanValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "rpcDepartment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "priority": {
          "type": "string",
          "format": "uint64"
        },
        "gid": {
          "type": "string"
        },
        "date_created": {
          "type": "string",
          "format": "date-time"
        },
        "date_updated": {
          "type": "string",
          "format": "date-time"
        },
        "date_removed": {
          "type": "string",
          "format": "date-time"
        },
        "removed": {
          "type": "boolean",
          "format": "boolean"
        },
        "date_enabled": {
          "type": "string",
          "format": "date-time"
        },
        "enabled": {
          "type": "boolean",
          "format": "boolean"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "rpcDepartmentRequest": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/rpcDepartment"
        }
      }
    },
    "rpcDepartmentResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/rpcDepartment"
        }
      }
    },
    "rpcDoubleValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "rpcDoubleValueMap": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        }
      }
    },
    "rpcEmployee": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "priority": {
          "type": "string",
          "format": "uint64"
        },
        "gid": {
          "type": "string"
        },
        "date_created": {
          "type": "string",
          "format": "date-time"
        },
        "date_updated": {
          "type": "string",
          "format": "date-time"
        },
        "date_removed": {
          "type": "string",
          "format": "date-time"
        },
        "removed": {
          "type": "boolean",
          "format": "boolean"
        },
        "date_enabled": {
          "type": "string",
          "format": "date-time"
        },
        "enabled": {
          "type": "boolean",
          "format": "boolean"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "rpcEmployeeRequest": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/rpcEmployee"
        }
      }
    },
    "rpcEmployeeResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/rpcEmployee"
        }
      }
    },
    "rpcFilter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "operation": {
          "$ref": "#/definitions/rpcFilterOperation"
        },
        "booleanValue": {
          "$ref": "#/definitions/rpcBooleanValue"
        },
        "integerValue": {
          "$ref": "#/definitions/rpcIntegerValue"
        },
        "integerValueMap": {
          "$ref": "#/definitions/rpcIntegerValueMap"
        },
        "doubleValue": {
          "$ref": "#/definitions/rpcDoubleValue"
        },
        "doubleValueMap": {
          "$ref": "#/definitions/rpcDoubleValueMap"
        },
        "stringValue": {
          "$ref": "#/definitions/rpcStringValue"
        },
        "stringValueMap": {
          "$ref": "#/definitions/rpcStringValueMap"
        },
        "timestampValue": {
          "$ref": "#/definitions/rpcTimestampValue"
        },
        "timestampValueMap": {
          "$ref": "#/definitions/rpcTimestampValueMap"
        }
      }
    },
    "rpcFilterOperation": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "EQ",
        "NEQ",
        "GT",
        "GTE",
        "LT",
        "LTE",
        "ISN",
        "ISNN",
        "IN",
        "INN",
        "CNS",
        "CNSN",
        "SSW",
        "SSWN",
        "ESW",
        "ESWN",
        "BWN",
        "BWNN"
      ],
      "default": "UNKNOWN",
      "title": "- EQ: equals\n - NEQ: not equals to\n - GT: greater than\n - GTE: greater than or equal to\n - LT: less than\n - LTE: less than or equal to\n - ISN: is null\n - ISNN: is not null\n - IN: in\n - INN: not in\n - CNS: contains\n - CNSN: not contains\n - SSW: starts with\n - SSWN: not starts with\n - ESW: ends with\n - ESWN: not ends with\n - BWN: between\n - BWNN: not between"
    },
    "rpcGroup": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "function": {
          "$ref": "#/definitions/GroupFunction"
        },
        "booleanValue": {
          "$ref": "#/definitions/rpcBooleanValue"
        },
        "integerValue": {
          "$ref": "#/definitions/rpcIntegerValue"
        },
        "integerValueMap": {
          "$ref": "#/definitions/rpcIntegerValueMap"
        },
        "doubleValue": {
          "$ref": "#/definitions/rpcDoubleValue"
        },
        "doubleValueMap": {
          "$ref": "#/definitions/rpcDoubleValueMap"
        },
        "stringValue": {
          "$ref": "#/definitions/rpcStringValue"
        },
        "stringValueMap": {
          "$ref": "#/definitions/rpcStringValueMap"
        },
        "timestampValue": {
          "$ref": "#/definitions/rpcTimestampValue"
        },
        "timestampValueMap": {
          "$ref": "#/definitions/rpcTimestampValueMap"
        }
      }
    },
    "rpcIntegerValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "rpcIntegerValueMap": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        }
      }
    },
    "rpcListDepartmentResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcDepartment"
          }
        }
      }
    },
    "rpcListEmployeeResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcEmployee"
          }
        }
      }
    },
    "rpcListPersonResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcPerson"
          }
        }
      }
    },
    "rpcListPositionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcPosition"
          }
        }
      }
    },
    "rpcPerson": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "priority": {
          "type": "string",
          "format": "uint64"
        },
        "gid": {
          "type": "string"
        },
        "date_created": {
          "type": "string",
          "format": "date-time"
        },
        "date_updated": {
          "type": "string",
          "format": "date-time"
        },
        "date_removed": {
          "type": "string",
          "format": "date-time"
        },
        "removed": {
          "type": "boolean",
          "format": "boolean"
        },
        "date_enabled": {
          "type": "string",
          "format": "date-time"
        },
        "enabled": {
          "type": "boolean",
          "format": "boolean"
        },
        "last_name": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "middle_name": {
          "type": "string"
        }
      }
    },
    "rpcPersonRequest": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/rpcPerson"
        }
      }
    },
    "rpcPersonResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/rpcPerson"
        }
      }
    },
    "rpcPosition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "priority": {
          "type": "string",
          "format": "uint64"
        },
        "gid": {
          "type": "string"
        },
        "date_created": {
          "type": "string",
          "format": "date-time"
        },
        "date_updated": {
          "type": "string",
          "format": "date-time"
        },
        "date_removed": {
          "type": "string",
          "format": "date-time"
        },
        "removed": {
          "type": "boolean",
          "format": "boolean"
        },
        "date_enabled": {
          "type": "string",
          "format": "date-time"
        },
        "enabled": {
          "type": "boolean",
          "format": "boolean"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "rpcPositionRequest": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/rpcPosition"
        }
      }
    },
    "rpcPositionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/rpcPosition"
        }
      }
    },
    "rpcSorter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "direction": {
          "$ref": "#/definitions/SorterDirection"
        }
      }
    },
    "rpcStatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "rpcStringValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "rpcStringValueMap": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "rpcTimestampValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "rpcTimestampValueMap": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
